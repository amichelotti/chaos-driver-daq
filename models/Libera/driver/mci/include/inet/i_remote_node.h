// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __i__remote__node_hh__
#define __i__remote__node_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif



#ifndef __i__types_hh_EXTERNAL_GUARD__
#define __i__types_hh_EXTERNAL_GUARD__
#include "i_types.h"
#endif
#ifndef __i__notification_hh_EXTERNAL_GUARD__
#define __i__notification_hh_EXTERNAL_GUARD__
#include "i_notification.h"
#endif
#ifndef __i__signal__receiver_hh_EXTERNAL_GUARD__
#define __i__signal__receiver_hh_EXTERNAL_GUARD__
#include "i_signal_receiver.h"
#endif
#ifndef __i__remote__signal_hh_EXTERNAL_GUARD__
#define __i__remote__signal_hh_EXTERNAL_GUARD__
#include "i_remote_signal.h"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE i_NET

_CORBA_MODULE_BEG

#ifndef __i__NET_mRemoteNode__
#define __i__NET_mRemoteNode__

  class RemoteNode;
  class _objref_RemoteNode;
  class _impl_RemoteNode;
  
  typedef _objref_RemoteNode* RemoteNode_ptr;
  typedef RemoteNode_ptr RemoteNodeRef;

  class RemoteNode_Helper {
  public:
    typedef RemoteNode_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemoteNode, RemoteNode_Helper> RemoteNode_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemoteNode,RemoteNode_Helper > RemoteNode_out;

#endif

  // interface RemoteNode
  class RemoteNode {
  public:
    // Declarations for this interface type.
    typedef RemoteNode_ptr _ptr_type;
    typedef RemoteNode_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_RemoteNode :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    char* GetName(const NodePath& a_relPath);
    char* GetNameByIndex(const NodePath& a_relPath, ::CORBA::ULong a_index);
    NodeNames* GetNodes(const NodePath& a_relPath);
    ::CORBA::ULong GetNodeCount(const NodePath& a_relPath);
    ::CORBA::Boolean IsLeaf(const NodePath& a_relPath);
    ::CORBA::ULong GetSize(const NodePath& a_relPath);
    ::CORBA::Long GetValueType(const NodePath& a_relPath);
    ::CORBA::Any* GetValue(const NodePath& a_relPath, ::CORBA::ULong a_pos, ::CORBA::ULong a_size, ::CORBA::TypeCode_ptr a_typeHint);
    void SetValue(const NodePath& a_relPath, const ::CORBA::Any& a_value, ::CORBA::ULong a_pos);
    ::CORBA::Boolean GetDomainValues(const NodePath& a_relPath, StringVec_out a_values);
    ::CORBA::Boolean GetValidatorExpression(const NodePath& a_relPath, ::CORBA::String_out a_value);
    Flags GetFlags(const NodePath& a_relPath);
    ::CORBA::Boolean Subscribe(const NodePath& a_relPath);
    ::CORBA::Boolean Unsubscribe(const NodePath& a_relPath);
    void StopNotifications();
    RemoteSignal_ptr GetRemoteSignal(const NodePath& a_relPath);

    inline _objref_RemoteNode()  { _PR_setobj(0); }  // nil
    _objref_RemoteNode(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemoteNode();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemoteNode(const _objref_RemoteNode&);
    _objref_RemoteNode& operator = (const _objref_RemoteNode&);
    // not implemented

    friend class RemoteNode;
  };

  class _pof_RemoteNode : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemoteNode() : _OMNI_NS(proxyObjectFactory)(RemoteNode::_PD_repoId) {}
    virtual ~_pof_RemoteNode();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemoteNode :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemoteNode();

    virtual char* GetName(const NodePath& a_relPath) = 0;
    virtual char* GetNameByIndex(const NodePath& a_relPath, ::CORBA::ULong a_index) = 0;
    virtual NodeNames* GetNodes(const NodePath& a_relPath) = 0;
    virtual ::CORBA::ULong GetNodeCount(const NodePath& a_relPath) = 0;
    virtual ::CORBA::Boolean IsLeaf(const NodePath& a_relPath) = 0;
    virtual ::CORBA::ULong GetSize(const NodePath& a_relPath) = 0;
    virtual ::CORBA::Long GetValueType(const NodePath& a_relPath) = 0;
    virtual ::CORBA::Any* GetValue(const NodePath& a_relPath, ::CORBA::ULong a_pos, ::CORBA::ULong a_size, ::CORBA::TypeCode_ptr a_typeHint) = 0;
    virtual void SetValue(const NodePath& a_relPath, const ::CORBA::Any& a_value, ::CORBA::ULong a_pos) = 0;
    virtual ::CORBA::Boolean GetDomainValues(const NodePath& a_relPath, StringVec_out a_values) = 0;
    virtual ::CORBA::Boolean GetValidatorExpression(const NodePath& a_relPath, ::CORBA::String_out a_value) = 0;
    virtual Flags GetFlags(const NodePath& a_relPath) = 0;
    virtual ::CORBA::Boolean Subscribe(const NodePath& a_relPath) = 0;
    virtual ::CORBA::Boolean Unsubscribe(const NodePath& a_relPath) = 0;
    virtual void StopNotifications() = 0;
    virtual RemoteSignal_ptr GetRemoteSignal(const NodePath& a_relPath) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RemoteNode;

_CORBA_MODULE_END



_CORBA_MODULE POA_i_NET
_CORBA_MODULE_BEG

  class RemoteNode :
    public virtual i_NET::_impl_RemoteNode,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemoteNode();

    inline ::i_NET::RemoteNode_ptr _this() {
      return (::i_NET::RemoteNode_ptr) _do_this(::i_NET::RemoteNode::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_i_NET
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, i_NET::RemoteNode_ptr _s);
void operator<<=(::CORBA::Any& _a, i_NET::RemoteNode_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, i_NET::RemoteNode_ptr& _s);



inline void
i_NET::RemoteNode::_marshalObjRef(::i_NET::RemoteNode_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_i__remote__node
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_i__remote__node
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_i__remote__node
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_i__remote__node
#endif

#endif  // __i__remote__node_hh__

